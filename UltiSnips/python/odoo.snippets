snippet import8 "odoo v8 import statements"
from openerp import models, fields, api, _
endsnippet

snippet super "super call"
super(${1:Class}, self).${2:__init__}($3${4:*args, }${5:**kwargs})
endsnippet

snippet todo "Todo"
# TODO: ${1:What?} [`!v strftime("%F")`]
endsnippet

snippet * "*args" 
*args
endsnippet

snippet ** "**kwargs" 
**kwargs
endsnippet

snippet *ak "*args, **kwargs"
*args, **kwargs
endsnippet

snippet utf8 "Insert UTF-8 coding string" !b
# -*- coding: utf-8 -*-
endsnippet

snippet vim "vim line" !b
# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
endsnippet

snippet ocreate "Odoo override create method." !b
@api.model
@api.returns('self', lambda obj: obj.id)
def create(self, vals):
    obj = super(${1:ClassName}, self).create(vals)
    $2
    return obj
endsnippet

snippet owrite "Odoo override write method." !b
@api.multi
def write(self, vals):
    result = super(${1:ClassName}, self).write(vals)
    $2
    return result
endsnippet

snippet ounlink "Odoo override unlink method." !b
@api.multi
def unlink(self):
    $2
    return super(${1:ClassName}, self).unlink()
endsnippet

snippet oover "Odoo override create and write." !b
@api.model
@api.returns('self', lambda obj: obj.id)
def create(self, values):
    return super(${1:ClassName}, self).create(values)

@api.multi
def write(self, values):
    return super($1, self).write(values)
endsnippet

snippet omanifest "Odoo Manifest" b
{
    'name': '${1:Module Name}',
    'version': '0.1',
    'category': 'General',
    'author': 'Bob <bob@steinbauerusa.com>',
    'description': '${2:$1}',
    'summary': """
    ${3:- Feature 1
    - Feature 2}
    """,
    'depends': [
        "base", "web",$4
    ],
    'installable': True,
    'data': [
        # 'views/views.xml',
        # 'security/security.xml',
        # 'security/ir.model.access.csv',
        # 'views/load_assets.xml',
        # 'views/menus.xml',
        $5
    ],
}
endsnippet

snippet oreport "Odoo custom report class" b
class ${1:CustomReport}(models.AbstractModel):
    _name = 'report.${2:module.report_name}'

    @api.multi
    def render_html(self, data=None):
        report_obj = self.env['report']
        report = report_obj._get_report_from_name('$2')
        ctx = {
            'doc_ids': self._ids,
            'doc_model': report.model,
            'docs': self,
        }
        return report_obj.render('$2', ctx)
endsnippet

snippet owiz "Odoo Wizard Model" b
class ${1:Wizard}(models.TransientModel):
    @api.model
    def _get_active_model(self):
        resource = self.env.context.get('active_model')
        if not resource:
            return None
        return self.env[resource]

    @api.model
    def _get_active_object(self):
        model = self._get_active_model()
        if model is None:
            return None
        id_ = self.env.context.get('active_id')
        if id_ is None:
            return None
        return model.browse(id_)

    @api.model
    def default_get(self, fields):
        env = self.env
        ctx = env.context
        defaults = super($1, self).default_get(fields)
        # defaults is a dict. the keys are this wizard's fields
        # set them like defaults['wiz_field_1'] = 'something'
        # check the current model or object using the methods above
        return defaults
endsnippet
